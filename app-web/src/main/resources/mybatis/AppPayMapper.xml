<?xml version="1.0" encoding="UTF-8" ?>
<!--
  ~ The MIT License (MIT)
  ~
  ~ Copyright (c) 2014-2016 abel533@gmail.com
  ~
  ~ Permission is hereby granted, free of charge, to any person obtaining a copy
  ~ of this software and associated documentation files (the "Software"), to deal
  ~ in the Software without restriction, including without limitation the rights
  ~ to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
  ~ copies of the Software, and to permit persons to whom the Software is
  ~ furnished to do so, subject to the following conditions:
  ~
  ~ The above copyright notice and this permission notice shall be included in
  ~ all copies or substantial portions of the Software.
  ~
  ~ THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
  ~ IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
  ~ FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
  ~ AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
  ~ LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
  ~ OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
  ~ THE SOFTWARE.
  -->
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd" >
<mapper namespace="com.dos.bsapp.dao.AppPayDao">

	<update id="updateNewNeedReCallbackRecord">
		update qt_app_pay_recallback set is_called = 1, called_time=now() where url=#{url}
	</update>
	<insert id="addNewNeedReCallbackRecord">
    insert into qt_app_pay_recallback
    (
      url,
      created
    )
    values
    (
    #{url},
    now()
    )
  </insert>
  
  
  <insert id="newAppPay" keyProperty="id" useGeneratedKeys="true" parameterType="com.dos.bsapp.model.AppPay">
    insert into bs_app_pay
    (
      app_id,
      order_series_number,
      created,
      is_paid,
      paid_port,
      paid_time,
      paid_info,
      reg_unit,
      total_series_number
    )
    values
    (
    #{appId},
    #{orderSeriesNumber},
    #{created},
    #{isPaid},
    #{paidPort},
    #{paidTime},
    #{paidInfo},
    #{regUnit},
    #{totalSeriesNumber}
    )

    <selectKey keyProperty="id" resultType="int" order="AFTER">
      SELECT LAST_INSERT_ID();
    </selectKey>
  </insert>

  <select id="getByAppOrder" resultType="com.dos.bsapp.model.AppPay">
    select
    id,
    app_id as appId,
    order_series_number as orderSeriesNumber,
    created,
    is_paid as isPaid,
    paid_port as paidPort,
    paid_time as paidTime,
    paid_info as paidInfo,
    reg_unit as regUnit,
    total_series_number as totalSeriesNumber,
    wechat_pay_link as wechatPayLink,
    order_name as orderName,
    total_price as totalPrice,
    show_url as showUrl,
    over_time as overTime,
    wechat_prepare_id as wechatPrepareId,
    wechat_prepare_id_create_time as wechatPrepareIdCreateTime,
    called_back as calledBack,
    called_back_time as calledBackTime
    from bs_app_pay
    where app_id = #{appId} and order_series_number = #{order};
  </select>

  <select id="get" resultType="com.dos.bsapp.model.AppPay">
    select
    id,
    app_id as appId,
    order_series_number as orderSeriesNumber,
    created,
    is_paid as isPaid,
    paid_port as paidPort,
    paid_time as paidTime,
    paid_info as paidInfo,
    reg_unit as regUnit,
    total_series_number as totalSeriesNumber,
    wechat_pay_link as wechatPayLink,
    order_name as orderName,
    total_price as totalPrice,
    show_url as showUrl,
    over_time as overTime,
    wechat_prepare_id as wechatPrepareId,
    wechat_prepare_id_create_time as wechatPrepareIdCreateTime,
    called_back as calledBack,
    called_back_time as calledBackTime
    from bs_app_pay
    where id=#{id};
  </select>
  
  <select id="getByTotalSeriesNumber" resultType="com.dos.bsapp.model.AppPay">
    select
    id,
    app_id as appId,
    order_series_number as orderSeriesNumber,
    created,
    is_paid as isPaid,
    paid_port as paidPort,
    paid_time as paidTime,
    paid_info as paidInfo,
    reg_unit as regUnit,
    total_series_number as totalSeriesNumber,
    wechat_pay_link as wechatPayLink,
    order_name as orderName,
    total_price as totalPrice,
    show_url as showUrl,
    over_time as overTime,
    wechat_prepare_id as wechatPrepareId,
    wechat_prepare_id_create_time as wechatPrepareIdCreateTime,
    called_back as calledBack,
    called_back_time as calledBackTime
    from bs_app_pay
    where total_series_number=#{totalSeriesNumber};
  </select>
  
  <update id="setPaid">
    update bs_app_pay set is_paid = #{isPaid}, paid_port=#{paidPort}, paid_time=#{paidTime}, paid_info=#{paidInfo}
    where id = #{id}
  </update>
  
  
  <update id="updateWechatPayLink">
    update bs_app_pay set wechat_pay_link = #{wechatPayLink}, order_name=#{orderName},total_price=#{totalPrice},show_url=#{showUrl},over_time=#{overTime}
    where id = #{id}
  </update>
  <update id="updateWechatPrepareId">
    update bs_app_pay set wechat_prepare_id = #{wechatPrepareId} , wechat_prepare_id_create_time=#{wechatPrepareIdCreateTime}
    where id = #{id}
  </update>
  
  <update id="updatePrepareIdPaid">
    update qt_wechat_prepare_id set status="paid", paid_time=now(), transaction_id=#{transactionId},total_fee=#{totalFee},open_id=#{openId}
    where out_trade_no = #{outTradeNo}
  </update>
  <update id="updateCalledBack">
    update qt_wechat_prepare_id set called_back = #{calledBack}, called_back_time=#{calledBackTime}
    where id = #{id}
  </update>
  
  <insert id="addNewPrepareIdRecord">
    insert into qt_wechat_prepare_id
    (
    out_trade_no,
    prepare_id,
    created,
    appid,
    mch_id,
    attach,
    total_fee,
    body) 
    values(
    #{out_trade_no},
    #{wechatPrepareId},
    now(),
	#{appid},
	#{mch_id},
	#{attach},
	#{total_fee},
	#{body})
  </insert>
  
  <insert id="addNewNeedRefund">
    insert into qt_apppay_need_refund
    (port,input_data,created) 
    values(#{port},#{inputData},now())
  </insert>
  

</mapper>